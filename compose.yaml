version: '3.8'

volumes:
  rabbitmq_data:
  my_volume:
  pgdata: 
  prometheusdata:
  grafanadata:

networks:
  kong-net:
    driver: bridge
    name: kong-net

services:


  generative_ai:
    build: 
      context: ./PlannerComplex/
      dockerfile: generative_ai.Dockerfile
    image: chtan.2022/ai:1.0
    restart: always
    networks:
      - kong-net
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5002:5002"

  currency_service:
    build: 
      context: ./PlannerComplex/
      dockerfile: currency_service.Dockerfile
    image: chtan.2022/currency:1.0
    restart: always
    networks:
      - kong-net
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5003"

  weather:
    build: 
      context: ./PlannerComplex/
      dockerfile: weather.Dockerfile
    image: chtan.2022/weather:1.0
    restart: always
    networks:
      - kong-net
    environment:
      PYTHONUNBUFFERED: 1    
    ports:
      - "5004:5004"


  planner:
    build: 
      context: ./PlannerComplex/
      dockerfile: planner.Dockerfile
    image: chtan.2022/planner:1.0
    restart: always
    networks:
      - kong-net
    depends_on:
      - generative_ai
      - currency_service
      - weather
      - rabbitmq
      - firebase
      - notification
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      gemini_URL: http://generative_ai:5002/plan
      weather_URL: http://weather:5004/weather
      currency_URL: http://currency_service:5003/exchange
      email_URL: http://firebase:5010/email
      PYTHONUNBUFFERED: 1      
    ports:
      - "5001:5001"

  firebase:
    build:
      context: ./LoginService/
      dockerfile: firebase.Dockerfile
    image: chtan.2022/firebase:1.0
    restart: always
    networks:
      - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/user_data
      PYTHONUNBUFFERED: 1
    ports:
      - "5010:5010"


  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    networks:
      - kong-net
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq

  notification:
    build:
      context: ./ShoppingComplex/
      dockerfile: notification.Dockerfile
    image: chtan.2022/notification:1.0
    restart: always
    networks:
      - kong-net
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      notification_queue_name: Notification
      PYTHONUNBUFFERED: 1
      
  payment_handler:
    build:
      context: ./ShoppingComplex/
      dockerfile: payment_handler.Dockerfile
    image: chtan.2022/payment_handler:1.0
    restart: always
    networks:
      - kong-net
    depends_on:
      - rabbitmq
      - payment
      - notification
      - shoppingcart
    environment:
      shopping_cart_url: http://shoppingcart:5006/cart
      payment_url: http://payment:5007/create-checkout-session
      notification_url: http://notification:5008/notification
      recipient_url: http://payment:5007/get_emails
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/cart
      rabbit_host: rabbitmq
      rabbit_port: 5672 
      PYTHONUNBUFFERED: 1
    ports:
      - "5909:5909"

  payment:
    build:
      context: ./ShoppingComplex/
      dockerfile: payment.Dockerfile
    image: chtan.2022/payment:1.0
    restart: always
    networks:
      - kong-net    
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/cart
      PYTHONUNBUFFERED: 1
    ports:
      - "5007:5007"

  shopItems:
    build:
      context: ./ShoppingComplex/
      dockerfile: shopItems.Dockerfile
    image: chtan.2022/shopitems:1.0
    restart: always
    networks:
      - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/item
      PYTHONUNBUFFERED: 1
    ports:
      - "5005:5005"


  shoppingcart:
    build:
      context: ./ShoppingComplex/
      dockerfile: shoppingcart.Dockerfile
    image: chtan.2022/shoppingcart:1.0
    restart: always
    networks:
      - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/cart
      PYTHONUNBUFFERED: 1
    ports:
      - "5006:5006"

  detection:
    build:
      context: ./TranslationComplex/
      dockerfile: detection.Dockerfile
    image: chtan.2022/detection:1.0
    restart: always
    networks:
      - kong-net
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5011:5011"
    volumes:
      - my_volume:/data
  
  error:
    build:
      context: ./TranslationComplex/
      dockerfile: error.Dockerfile
    image: chtan.2022/error:1.0
    restart: always
    networks:
      - kong-net
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5014:5014"
  
  orchestrator:
    build:
      context: ./TranslationComplex/
      dockerfile: orchestrator.Dockerfile
    image: chtan.2022/orchestrator:1.0
    restart: always
    networks:
      - kong-net
    depends_on:
      - detection
      - error
      - text_replacement
      - translation
    environment:
      detect_url: http://detection:5011/detect_text
      translate_url: http://translation:5012/get_languages
      decipher_url: http://translation:5012/translate_text
      replacement_url: http://text_replacement:5013/replace_text
      error_url: http://error:5014/log_error
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"
    volumes:
      - my_volume:/data

  text_replacement:
    build:
      context: ./TranslationComplex/
      dockerfile: text_replacement.Dockerfile
    image: chtan.2022/text_replacement:1.0
    restart: always
    networks:
      - kong-net
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5013:5013"
    volumes:
      - my_volume:/data
  
  translation:
    build:
      context: ./TranslationComplex/
      dockerfile: translation.Dockerfile
    image: chtan.2022/translation:1.0
    restart: always
    networks:
      - kong-net
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5012:5012"
    volumes:
      - my_volume:/data

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      #KONG_PROXY_KEEPALIVE_TIMEOUT: 0
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
    #######################################
  # Prometheus
  #######################################
  prometheus:
    image: prom/prometheus:v2.49.1
    restart: always
    networks:
      - kong-net
    ports:
      - "9090:9090"
    volumes:
      - prometheusdata:/etc/prometheus


  #######################################
  # Grafana Open Source
  #######################################
  grafana:
    image: grafana/grafana-oss:10.2.3
    restart: always
    networks:
      - kong-net
    ports:
      - "13000:3000"
    volumes:
      - grafanadata:/var/lib/grafana


